syntax = "proto3";
package services;
option go_package = "github.com/orbs-network/orbs-spec/types/go/services";

import "primitives/types.proto";
import "protocol/results.proto";
import "protocol/blocks.proto";
import "protocol/nodes.proto";

option serialize_service_args = false;

// relies on TransactionPool, VirtualMachine, StateStorage
service ConsensusContext {
    // called by ConsensusAlgo
    rpc RequestNewTransactionsBlock (RequestNewTransactionsBlockInput) returns (RequestNewTransactionsBlockOutput);
    rpc RequestNewResultsBlock (RequestNewResultsBlockInput) returns (RequestNewResultsBlockOutput);
    rpc ValidateTransactionsBlock (ValidateTransactionsBlockInput) returns (ValidateTransactionsBlockOutput);
    rpc ValidateResultsBlock (ValidateResultsBlockInput) returns (ValidateResultsBlockOutput);
    rpc RequestOrderingCommittee (RequestCommitteeInput) returns (RequestCommitteeOutput);
    rpc RequestValidationCommittee (RequestCommitteeInput) returns (RequestCommitteeOutput);
}

message RequestNewTransactionsBlockInput {
    uint64 block_height = 1;
    uint32 max_block_size_kb = 2;
    uint32 max_number_of_transactions = 3;
    primitives.sha256 prev_block_hash = 4;
}

message RequestNewTransactionsBlockOutput {
    protocol.RequestStatus status = 1;
    protocol.TransactionsBlock transactions_block = 2;
}

message RequestNewResultsBlockInput {
    uint64 block_height = 1;
    primitives.sha256 prev_block_hash = 2;
}

message RequestNewResultsBlockOutput {
    protocol.RequestStatus status = 1;
    protocol.ResultsBlock results_block = 2;
}

message ValidateTransactionsBlockInput {
    protocol.TransactionsBlock transactions_block = 1;
    primitives.sha256 prev_block_hash = 2;
}

message ValidateTransactionsBlockOutput {
    protocol.RequestStatus status = 1;
}

message ValidateResultsBlockInput {
    protocol.ResultsBlock results_block = 1;
    primitives.sha256 prev_block_hash = 2;
}

message ValidateResultsBlockOutput {
    protocol.RequestStatus status = 1;
}

message RequestCommitteeInput {
    uint64 block_height = 1;
    uint64 random_seed = 2;
    uint32 max_committee_size = 3;
}

message RequestCommitteeOutput {
    protocol.RequestStatus status = 1;
    repeated protocol.NodeData node_data = 2;
}