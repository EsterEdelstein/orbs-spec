syntax = "proto3";

import "protocol/primitives.proto";
import "protocol/virtual-machine.proto";


service Processor {
    rpc ProcessCall (ProcessCallInput) returns (ProcessCallOutput);
    rpc DeployService (DeployServiceInput) returns (DeployServiceOutput);
}
  
message ProcessCallInput {
    Uint32 context_id = 1;
    AccessScope access_scope = 2;
    NameSpace namespace = 3;
    MethodAddress method = 4;
    NameSpace calling_namespace = 5;
    repeated MethodCallArguments input_argument = 6;
    AddressToken sender = 7;
}
  
message ProcessCallOutput {
    repeated MethodCallArguments output_argument = 1;
}

enum AccessScope {
    READ_ONLY = 0;
    READ_WRITE = 1;
}

message DeployServiceInput {
    Uint32 context_id = 1;
    NameSpace service = 2;
    AddressToken sender = 3;
}

message DeployServiceOutput {
    
}