syntax = "proto3";
package services;
option go_package = "github.com/orbs-network/orbs-spec/types/go/services";

import "primitives/protocol.proto";
import "protocol/contracts.proto";
import "protocol/signers.proto";
import "protocol/results.proto";
import "services/handlers/contract_sdk_call.proto";

option serialize_messages = false;

service Processor {
    // registration methods for external handlers that wish to receive callbacks
    option register_handler = "handlers.ContractSdkCallHandler";

    // called by VirtualMachine
    rpc ProcessCall (ProcessCallInput) returns (ProcessCallOutput);
    rpc GetContractInfo (GetContractInfoInput) returns (GetContractInfoOutput);
}
  
message ProcessCallInput {
    primitives.execution_context_id context_id = 1;
    primitives.contract_name contract_name = 2;
    primitives.method_name method_name = 3;
    repeated protocol.MethodArgument input_arguments = 4;
    protocol.ExecutionAccessScope access_scope = 5;
    protocol.ExecutionPermissionScope permission_scope = 6; // TODO: move to SDK
    primitives.contract_name calling_service = 7; // TODO: move to SDK
    protocol.Signer transaction_signer = 8; // TODO: move to SDK
}

message ProcessCallOutput {
    repeated protocol.MethodArgument output_arguments = 1;
    protocol.ExecutionResult call_result = 2;
}

message GetContractInfoInput {
    primitives.contract_name contract_name = 1;
}

message GetContractInfoOutput {
    protocol.ExecutionPermissionScope permission_scope = 1;
}