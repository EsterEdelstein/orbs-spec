syntax = "proto3";
package services;
option go_package = "github.com/orbs-network/orbs-spec/types/go/services";

import "protocol/contracts.proto";
import "protocol/addresses.proto";
import "protocol/results.proto";
import "protocol/extras.proto";
import "services/handlers/contract_sdk_call.proto";

option serialize_service_args = false;

service Processor {
    // registration methods for external handlers that wish to receive callbacks
    option register_handler = "handlers.ContractSdkCallHandler";

    // called by VirtualMachine
    rpc ProcessCall (ProcessCallInput) returns (ProcessCallOutput);
    rpc DeployNativeService (DeployNativeServiceInput) returns (DeployNativeServiceOutput);
}
  
message ProcessCallInput {
    uint32 context_id = 1;
    protocol.ContractAddress contract = 2;
    protocol.MethodAddress method = 3;
    repeated protocol.MethodArgument input_argument = 4;
    protocol.AccessScope access_scope = 5;
    protocol.PermissionScope permission_scope = 6;
    protocol.ContractAddress calling_service = 7; // TODO: move to SDK
    protocol.Sender transaction_sender = 8; // TODO: move to SDK
}

message ProcessCallOutput {
    repeated protocol.MethodArgument output_argument = 1;
    protocol.CallMethodStatus call_status = 2;
}

message DeployNativeServiceInput {
    uint32 context_id = 1;
    protocol.ContractAddress contract = 2;
    protocol.AccessScope access_scope = 3;
    protocol.PermissionScope permission_scope = 4;
    protocol.ContractAddress calling_service = 5; // TODO: move to SDK
    protocol.Sender transaction_sender = 6; // TODO: move to SDK
}

message DeployNativeServiceOutput {
    protocol.DeployServiceStatus status = 1;
}