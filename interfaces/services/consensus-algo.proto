syntax = "proto3";

import "protocol/primitives.proto";
import "protocol/protocol-primitives.proto";
import "protocol/messages/messages.proto";
import "protocol/blocks.proto";
import "services/gossip.proto";


service Consensus {
  // Internally called on block commit.
  rpc OnNewConsensusRound (OnNewConsensusRoundInput) returns (OnNewConsensusRoundOutput);
  rpc GetCurrentLeader (GetCurrentLeaderInput) returns (GetCurrentLeaderOutput);
  
  // Gossip
  rpc GossipMessageReceived (GossipMessageReceivedInput) returns (GossipMessageReceivedOutput);
  rpc OnPrePrepareReceived (OnPrePrepareReceivedInput) returns (OnPrePrepareReceivedOutput);
  rpc OnPrepareReceived (OnPrepareReceivedInput) returns (OnPrepareReceivedOutput);
  rpc OnCommitReceived (OnCommitReceivedInput) returns (OnCommitReceivedOutput);
  rpc OnViewChangeReceived (OnViewChangeReceivedInput) returns (OnViewChangeReceivedOutput);
  rpc OnNewViewReceived (OnNewViewReceivedInput) returns (OnNewViewReceivedOutput);
  
  // Called by block storage / Internal 
  rpc AcknowledgeTransactionsBlockConsensus (AcknowledgeTransactionsBlockConsensusInput) returns (AcknowledgeTransactionsBlockConsensusOutput);
  rpc AcknowledgeResultsBlockConsensus (AcknowledgeResultsBlockConsensusInput) returns (AcknowledgeResultsBlockConsensusOutput);
}

message OnNewConsensusRoundInput { 

}

message OnNewConsensusRoundOutput { 

}

message OnPrePrepareReceivedInput {
  PrePrepareMessage pre_prepare = 1;
}

message OnPrePrepareReceivedOutput { 

}

message OnPrepareReceivedInput {
  PrepareMessage prepare = 1;
}

message OnPrepareReceivedOutput { 

}

message OnCommitReceivedInput {
  CommitMessage commit = 1;
}

message OnCommitReceivedOutput { 

} 

message OnViewChangeReceivedInput {
  ViewChangeMessage view_change = 1;
}

message OnViewChangeReceivedOutput { 

} 

message OnNewViewReceivedInput {
  NewViewMessage new_view = 1;
}

message OnNewViewReceivedOutput { 

} 

message GetCurrentLeaderInput {
  repeated Ed25519PKey node_id = 1;
  Uint32 view = 2;
}

message AcknowledgeTransactionsBlockConsensusInput {
  TransactionsBlockHeader transactions_block_header = 1;
  TransactionsBlockMetaData transactions_block_meta_data = 2;
  TransactionsBlockProof transactions_block_proof = 3;
  // Previous block data
  TransactionsBlockHeader previous_committed_transactions_block_header = 4;
  TransactionsBlockMetaData previous_committed_transactions_block_meta_data = 5;
  TransactionsBlockProof previous_committed_transactions_block_proof = 6;
  ResultsBlockProof previous_committed_results_block_proof = 7;
}

message AcknowledgeTransactionsBlockConsensusOutput {
  ValidateBlockConsensus status = 1;
}

message AcknowledgeResultsBlockConsensusInput {
  ResultsBlockHeader results_block_header = 1;
  ResultsBlockProof results_block_proof = 2;
  // Previous block data
  ResultsBlockHeader results_block_header = 3;
  TransactionsBlockMetaData previous_committed_transactions_block_meta_data = 4;
  TransactionsBlockProof previous_committed_transactions_block_proof = 5;
  ResultsBlockProof previous_committed_results_block_proof = 6;
}


message AcknowledgeResultsBlockConsensusOutput {
  ValidateBlockConsensus status = 1;
}

message ValidateBlockConsensus {
  VALID_FOR_COMMIT = 0;
  NOT_VALID_FOR_COMMIT = 1;
}
