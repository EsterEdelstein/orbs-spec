syntax = "proto3";

import "protocol/primitives.proto";
import "protocol/gossip.proto";
import "protocol/blocks.proto";
import "services/configuration-manager.proto";

service Consensus {
  // Internally called on block commit.
  rpc OnNewConsensusRound (OnNewConsensusRoundInput) returns (OnNewConsensusRoundOutput);
  
  //Gossip
  rpc GossipMessageReceived (GossipMessageReceivedInput) returns (GossipMessageReceivedOutput);
  
  // Block storage / Internal 
  rpc AcknowledgeTransactionsBlockConsensus (AcknowledgeTransactionsBlockConsensusInput) returns (AcknowledgeTransactionsBlockConsensusOutput);
  rpc AcknowledgeResultsBlockConsensus (AcknowledgeResultsBlockConsensusInput) returns (AcknowledgeResultsBlockConsensusOutput);
}

message OnNewConsensusRoundInput { 
  TransactionsBlockHeader previous_committed_transactions_block_header = 1;
  TransactionsBlockMetaData previous_committed_transactions_block_meta_data = 2;
  TransactionsBlockProof previous_committed_transactions_block_proof = 3;
  ResultsBlockHeader previous_committed_results_block_header = 4;
  ResultsBlockProof previous_committed_results_block_proof = 5;
}

message OnNewConsensusRoundOutput { 

}

message AcknowledgeTransactionsBlockConsensusInput {
  TransactionsBlockHeader transactions_block_header = 1;
  TransactionsBlockMetaData transactions_block_meta_data = 2;
  TransactionsBlockProof transactions_block_proof = 3;
  // Previous block data
  TransactionsBlockHeader previous_committed_transactions_block_header = 4;
  TransactionsBlockMetaData previous_committed_transactions_block_meta_data = 5;
  TransactionsBlockProof previous_committed_transactions_block_proof = 6;
  ResultsBlockProof previous_committed_results_block_proof = 7;
}

message AcknowledgeTransactionsBlockConsensusOutput {
  ValidateBlockConsensus status = 1;
}

message AcknowledgeResultsBlockConsensusInput {
  ResultsBlockHeader results_block_header = 1;
  ResultsBlockProof results_block_proof = 2;
  // Previous block data
  ResultsBlockHeader results_block_header = 4;
  TransactionsBlockMetaData previous_committed_transactions_block_meta_data = 5;
  TransactionsBlockProof previous_committed_transactions_block_proof = 6;
  ResultsBlockProof previous_committed_results_block_proof = 7;
}


message AcknowledgeResultsBlockConsensusOutput {
  ValidateBlockConsensus status = 1;
}

message ValidateBlockConsensus {
  VALID_FOR_COMMIT = 0;
  NOT_VALID_FOR_COMMIT = 1;
}
