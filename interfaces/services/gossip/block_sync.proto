syntax = "proto3";
package gossip;
option go_package = "github.com/orbs-network/orbs-spec/types/go/services/gossip";

import "../primitives/crypto.proto";
import "../protocol/messages/block_sync.proto";

option serialize_service_args = false;

service BlockSync {
    // registration methods for external handlers that wish to receive callbacks
    option register_handler = "BlockSyncHandler";

    // called by anyone looking to send gossip messages
    rpc BroadcastBlockSyncAvailabilityRequest (BlockSyncAvailabilityRequestInput) returns (BlockSyncOutput);
    rpc SendBlockSyncAvailabilityResponse (BlockSyncAvailabilityResponseInput) returns (BlockSyncOutput);
    rpc SendBlockSyncRequest (BlockSyncRequestInput) returns (BlockSyncOutput);
    rpc SendBlockSyncResponse (BlockSyncResponseInput) returns (BlockSyncOutput);
}

service BlockSyncHandler {
    rpc HandleBlockAvailabilityRequest (BlockSyncAvailabilityRequestInput) returns (BlockSyncOutput);
    rpc HandleBlockAvailabilityResponse (BlockSyncAvailabilityResponseInput) returns (BlockSyncOutput);
    rpc HandleBlockSyncRequest (BlockSyncRequestInput) returns (BlockSyncOutput);
    rpc HandleBlockSyncResponse (BlockSyncResponseInput) returns (BlockSyncOutput);
}

message BlockSyncAvailabilityRequestInput {
    messages.BlockSyncAvailabilityRequestHeader header = 1;
    messages.BlockSyncAvailability request = 2;
}

message BlockSyncAvailabilityResponseInput {
    primitives.ed25519_pkey recipient = 1;
    messages.BlockSyncAvailabilityResponseHeader header = 2;
    messages.BlockSyncAvailability response = 3;
}

message BlockSyncRequestInput {
    primitives.ed25519_pkey recipient = 1;
    messages.BlockSyncRequestHeader header = 2;
    messages.BlockSyncRequest request = 3;
}

message BlockSyncResponseInput {
    primitives.ed25519_pkey recipient = 1;
    messages.BlockSyncResponseHeader header = 2;
    repeated bytes blocks = 3; // TODO: change this into a union
}

message BlockSyncOutput {
}