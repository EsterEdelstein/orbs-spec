syntax = "proto3";
package services;
option go_package = "github.com/orbs-network/orbs-spec/types/go/services";

import "primitives/types.proto";
import "protocol/transactions.proto";
import "protocol/results.proto";
import "protocol/contracts.proto";

service PublicApi {
    // called by ClientSdk
    rpc SendTransaction (SendTransactionInput) returns (SendTransactionOutput);
    rpc CallMethod (CallMethodInput) returns (CallMethodOutput);
    rpc GetTransactionStatus (GetTransactionStatusInput) returns (GetTransactionStatusOutput);
    // called by TransactionPool
    rpc ReturnTransactionResults(ReturnTransactionResultsInput) returns (ReturnTransactionResultsOutput);
}

message SendTransactionInput {
    protocol.SignedTransaction signed_transaction = 1;
}

message SendTransactionOutput {
    protocol.TransactionReceipt receipt = 1;
    protocol.TransactionStatus transaction_status = 2;
    uint64 block_height = 3;
    uint64 block_timestamp = 4;
}

message CallMethodInput {
    protocol.Transaction transaction = 1;
}

message CallMethodOutput {
    repeated protocol.MethodArgument output_argument = 1;
    protocol.CallMethodStatus call_status = 2;
    uint64 block_height = 3;
    uint64 block_timestamp = 4;
}

message GetTransactionStatusInput {
    primitives.sha256 txid = 1;
    uint64 timestamp = 2;
}

message GetTransactionStatusOutput {
    protocol.TransactionReceipt receipt = 1;
    protocol.TransactionStatus status = 2;
    uint64 block_height = 3;
    uint64 block_timestamp = 4;
}

message ReturnTransactionResultsInput {
    repeated protocol.TransactionReceipt transaction_receipt = 1;
    uint64 block_height = 2;
    uint64 timestamp = 3;
}

message ReturnTransactionResultsOutput {
}
