syntax = "proto3";
package services;
option go_package = "github.com/orbs-network/orbs-spec/types/go/services";

import "protocol/results.proto";
import "protocol/contracts.proto";
import "protocol/extras.proto";

option serialize_service_args = false;

service CrosschainConnector {
    // called by VirtualMachine
    rpc EthereumCallContract (EthereumCallContractInput) returns (EthereumCallContractOutput); // TODO: don't we need implementation per connector
}

message EthereumCallContractInput {
    string ethereum_contract_address = 1;
    string ethereum_function_canonical_form = 2;
    repeated protocol.MethodArgument input_argument = 3;
    uint64 ethereum_block_height = 4;
    protocol.BlockHeightMode ethereum_block_height_mode = 5;
}

message EthereumCallContractOutput {
    repeated protocol.MethodArgument output_argument = 1;
    protocol.CallMethodStatus call_status = 2;
    uint64 ethereum_block_height = 3;
    uint64 ethereum_block_timestamp = 4;
}