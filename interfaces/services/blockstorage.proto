syntax = "proto3";
package services;
option go_package = "github.com/orbs-network/orbs-spec/types/go/services";

import "primitives/types.proto";
import "protocol/transactions.proto";
import "protocol/blocks.proto";
import "protocol/gossip/blocksync/messages.proto";
import "services/gossip.proto";

service BlockStorage {
    // called by ConsensusAlgo
    rpc CommitBlock (CommitBlockInput) returns (CommitBlockOutput);
    rpc GetTransactionsBlockHeader (GetTransactionsBlockHeaderInput) returns (GetTransactionsBlockHeaderOutput);
    rpc GetResultsBlockHeader (GetResultsBlockHeaderInput) returns (GetResultsBlockHeaderOutput);
    // called by PublicApi
    rpc GetTransactionReceipt (GetTransactionReceiptInput) returns (GetTransactionReceiptOutput);
    rpc GetLastCommittedBlockHeight (GetLastCommittedBlockHeightInput) returns (GetLastCommittedBlockHeightOutput);
    // called by Gossip
    rpc GossipMessageReceived (GossipMessageReceivedInput) returns (GossipMessageReceivedOutput); // TODO: improve this global interface
    // internal gossip handlers
    rpc OnBlockAvailabilityRequest (OnBlockAvailabilityRequestInput) returns (OnBlockAvailabilityRequestOutput);
    rpc OnBlockAvailabilityResponse (OnBlockAvailabilityResponseInput) returns (OnBlockAvailabilityResponseOutput);
    rpc OnBlockSyncRequest (OnBlockSyncRequestInput) returns (OnBlockSyncRequestOutput);
    rpc OnBlockSyncResponse (OnBlockSyncResponseInput) returns (OnBlockSyncResponseOutput);
    // internal call
    rpc ValidateBlockForCommit (ValidateBlockForCommitInput) returns (ValidateBlockForCommitOutput);
}

message CommitBlockInput {
    protocol.BlockPair block_pair = 1;
}

message CommitBlockOutput {
}

message GetTransactionsBlockHeaderInput {
    uint64 block_height = 1;
}

message GetTransactionsBlockHeaderOutput {
    protocol.TransactionsBlockHeader transactions_block_header = 1;
    protocol.TransactionsBlockMetaData transactions_block_meta_data = 2;
    protocol.TransactionsBlockProof transactions_block_proof = 3;
}

message GetResultsBlockHeaderInput {
    uint64 block_height = 1;
}

message GetResultsBlockHeaderOutput {
    protocol.ResultsBlockHeader results_block_header = 1;
    protocol.ResultsBlockProof results_block_proof = 2;
}

message GetTransactionReceiptInput {
    primitives.uint256 txid = 1; // TODO: which txid?
    uint64 timestamp = 2;
}

message GetTransactionReceiptOutput {
    protocol.TransactionReceipt receipt = 1;
    uint64 block_height = 2;
    uint64 block_timestamp = 3;
}

message GetLastCommittedBlockHeightInput {
}

message GetLastCommittedBlockHeightOutput {
    uint64 last_committed_block_height = 1;
    uint64 last_committed_block_timestamp = 2;
}

message OnBlockAvailabilityRequestInput {
    blocksync.BlockAvailabilityRequestMessage block_availability_request = 1;
}

message OnBlockAvailabilityRequestOutput {
}

message OnBlockAvailabilityResponseInput {
    blocksync.BlockAvailabilityRequestMessage block_availability_response = 1;
}

message OnBlockAvailabilityResponseOutput {
}

message OnBlockSyncRequestInput {
    blocksync.BlockSyncRequestMessage block_sync_request = 1;
}

message OnBlockSyncRequestOutput {
}

message OnBlockSyncResponseInput {
    blocksync.BlockSyncResponseMessage block_sync_response = 1;
}

message OnBlockSyncResponseOutput {
}

message ValidateBlockForCommitInput {
    // TODO: should this be empty?
}

message ValidateBlockForCommitOutput {
}