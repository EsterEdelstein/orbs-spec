syntax = "proto3";
package services;
option go_package = "github.com/orbs-network/orbs-spec/types/go/services";

import "primitives/types.proto";
import "protocol/results.proto";
import "protocol/transactions.proto";
import "protocol/blocks.proto";
import "protocol/gossip/transactionrelay/messages.proto";
import "services/gossip.proto";

service TransactionPool {
    // called by PublicApi
    rpc AddNewTransaction (AddNewTransactionInput) returns (AddNewTransactionOutput);
    rpc GetCommittedTransactionReceipt (GetCommittedTransactionReceiptInput) returns (GetCommittedTransactionReceiptOutput);
    // called by ConsensusContext
    rpc GetTransactionsForOrdering (GetTransactionsForOrderingInput) returns (GetTransactionsForOrderingOutput);
    rpc ValidateTransactionsForOrdering (ValidateTransactionsForOrderingInput) returns (ValidateTransactionsForOrderingOutput);
    // called by BlockStorage
    rpc CommitTransactionReceipts (CommitTransactionReceiptsInput) returns (CommitTransactionReceiptsOutput);
    // called by Gossip
    rpc GossipMessageReceived (GossipMessageReceivedInput) returns (GossipMessageReceivedOutput);
    // internal gossip handlers
    rpc OnForwardedTransactions (OnForwardedTransactionsInput) returns (OnForwardedTransactionsOutput);
}

message AddNewTransactionInput {
    protocol.SignedTransaction signed_transaction = 1;
}

message AddNewTransactionOutput {
    protocol.TransactionStatus transaction_status = 1;
    protocol.TransactionReceipt transaction_receipt = 2;
    uint64 block_height = 3;
    uint64 block_timestamp = 4;
}

message GetCommittedTransactionReceiptInput {
    primitives.sha256 txid = 1;
    uint64 timestamp = 2;
}

message GetCommittedTransactionReceiptOutput {
    protocol.TransactionStatus transaction_status = 1;
    protocol.TransactionReceipt transaction_receipt = 2;
    uint64 block_height = 3;
    uint64 block_timestamp = 4;
}

message GetTransactionsForOrderingInput {
    uint64 block_height = 1;
    uint32 max_transactions_set_size_kb = 2;
    uint32 max_number_of_transactions = 3;
}

message GetTransactionsForOrderingOutput {
    protocol.RequestStatus status = 1;
    repeated protocol.SignedTransaction signed_transaction = 2;
}

message ValidateTransactionsForOrderingInput {
    uint64 block_height = 1;
    repeated protocol.SignedTransaction transaction = 2;
}

message ValidateTransactionsForOrderingOutput {
    protocol.RequestStatus status = 1;
}

message CommitTransactionReceiptsInput {
    protocol.ResultsBlockHeader results_block_header = 1;
    repeated protocol.TransactionReceipt transaction_receipt = 2;
    uint64 last_committed_block_height = 3;
}

message CommitTransactionReceiptsOutput {
    uint64 next_desired_block_height = 1;
    uint64 last_committed_block_height = 2;
}

message OnForwardedTransactionsInput {
    transactionrelay.ForwardedTransactionsMessage transaction_batch = 1;
}

message OnForwardedTransactionsOutput {
}