syntax = "proto3";

import "protocol/primitives.proto";
import "protocol/gossip.proto";
import "protocol/blocks.proto";

service BlockStorage {
  rpc AddBlock (AddBlockInput) returns (AddBlockOutput);
  rpc GetBlocksByHeight (GetBlocksByHeight) returns (GetBlocksByHeightOutput);
  rpc GetOrderingBlockByHeight (GetBlocksByHeightInput) returns (GetBlocksByHeightOutput);
  rpc GetValidationBlockByHeight (GetBlocksByHeightInput) returns (GetBlocksByHeightOutput);
  rpc GetLastBlockHeight (GetTopBlockHeightInput) returns (GetTopBlockHeightOutput);
  rpc GossipMessageReceived (GossipMessageReceivedInput) returns (GossipMessageReceivedOutput);
  rpc GetTransactionReceipt (GetTransactionReceiptInput) returns (GetTransactionReceipt);
//  rpc GetReceipts(GetBlockReceiptsInput) returns (GetBlockReceiptsOutput);
//  rpc GetStateDiff(GetStateDiffInput) returns (GetStateDiffOutput);
  rpc RequestReceiptsUpdate (RequestReceiptsUpdateInput) returns (RequestReceiptsUpdateOutput);
  rpc RequestStateDiffUpdate (RequestStateDiffUpdateInput) returns (RequestStateDiffUpdateOutput);
//  rpc GetOrderingBlockByID (GetBlockByIDInput) returns (GetOrderingBlockOutput);
//  rpc GetValidationBlockByID (GetBlockByIDInput) returns (GetValidationBlockOutput);
//  rpc SubscribeEvents(SubscribeEventsInput) returns (SubscribeEventsOutput);
//  rpc UnSubscribeEvents(SubscribeEventsInput) returns (SubscribeEventsOutput);
//  rpc SubscribeRecipt(SubscribeReciptInput) returns (SubscribeReciptOutput);
}

message AddBlockInput {
  OrderingBlock ordering_block = 1;
  ValidationBlock validation_block = 2;
}

message AddBlockOutput {
  // empty
}

message GetBlocksByHeightInput {
  Uint64 first_block_height = 1;
  Uint64 last_block_height = 2;
}

message GetBlocksByHeightOutput {
  Uint64 top_block = 1;
  Uint64 last_added_block = 2;
  repeated OrderingBlock ordering_block = 3;
  repeated ValidationBlock validation_block = 4;
}

message GetLastBlockInput {
  // empty
}

message GetLastBlockOutput {
  Uint64 last_committed_block_height = 1;
  Uint64 last_added_block_height = 2;
}

message GetTransactionReceiptInput {
  Uint256 tx_id = 1;
  Uint64 timestamp = 2;
}

message GetTransactionReceiptOutput {
  TransactionReceipt receipt = 1;
  Uint64 block_height = 2;
  Uint64 block_timestamp = 3;
}


message GetReceiptsInput {
  Uint64 first_block_height = 1;
  Uint64 last_block_height = 2;
}

message GetReceiptsOutput {
  Uint64 last_committed_block = 1;
  Uint64 last_added_block = 2;
  ValidationBlock validation_block = 3; // Nullify sc_state_diff
}

message GetStateDiffInput {
  Uint64 first_block_height = 1;
  Uint64 last_block_height = 2;
}

message GetStateDiffOutput {
  Uint64 last_committed_block = 1;
  Uint64 last_added_block = 2;
  ValidationBlock validation_block = 3; // Nullify transaction_receipts
}

message RequestReceiptsUpdateInput {
  Ed25519PKey consumer_id = 1;
  Unit64 consumer_block_height = 2;
  Uint64 target_block_height = 3;
}

message RequestReceiptsUpdateOutput {
  // empty
}

message RequestStateDiffUpdateInput {
  Ed25519PKey consumer_id = 1;
  Unit64 consumer_block_height = 2;
  Uint64 target_block_height = 3;
}

message RequestStateDiffUpdateOutput {
  // empty
}

/*
message SubscribeEventsInput {
  Ed25519PKey subscriber_id = 1;
  repeated EventSubscription events = 2;
}

message SubscribeEventsOutput {
  Uint64 token = 1;
}

message EventSubscription {
  EventType event_type = 1;
  Address contract_address = 2; // Valid only for per smart contract events.
  Uint32 event_index = 3;
  Uint256 event_id = 4;
  //Uint32 exeperation = 5;
}

enum EventType {
  GLOBAL = 0;
  SMART_CONTRACT = 1;
}
message UnSubscribeEventsInput {
  Uint64 token = 1;
}

message UnSubscribeEventsOutput {
  // empty
}

message EventData {
  EventType event_type = 1;
  Address contract_address = 2; 
  Uint32 event_index = 3;
  Uint256 event_id = 4;
  String Event = 5;
}

message SubscribeReciptInput {
  SHA256 tx_id = 1;  
}

message SubscribeReciptOutput {
  Bool success = 1;
}
*/
