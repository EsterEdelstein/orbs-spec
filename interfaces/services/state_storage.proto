syntax = "proto3";
package services;
option go_package = "github.com/orbs-network/orbs-spec/types/go/services";

import "primitives/types.proto";
import "protocol/contracts.proto";
import "protocol/results.proto";
import "protocol/blocks.proto";

option serialize_service_args = false;

service StateStorage {
    // called by BlockStorage
    rpc CommitStateDiff (CommitStateDiffInput) returns (CommitStateDiffOutput);

    // called by VirtualMachine
    rpc ReadKeys (ReadKeysInput) returns (ReadKeysOutput);
    rpc GetStateStorageBlockHeight (GetStateStorageBlockHeightInput) returns (GetStateStorageBlockHeightOutput);

    // called by ConsensusContext
    rpc GetStateHash (GetStateHashInput) returns (GetStateHashOutput);
}

message ReadKeysInput {
    uint64 block_height = 1;
    protocol.ContractAddress contract = 2;
    repeated primitives.ripmd160_sha256 key = 3;
}

message ReadKeysOutput {
    protocol.RequestStatus status = 1;
    // TODO: map<RIPMD160crypto.sha256,bytes> values = 2;
    repeated bytes blob = 2;
}

message GetStateStorageBlockHeightInput {
}

message GetStateStorageBlockHeightOutput {
    uint64 last_committed_block_height = 1;
    uint64 last_committed_block_timestamp = 2;
}

message CommitStateDiffInput {
    protocol.ResultsBlockHeader results_block_header = 1;
    repeated protocol.ContractStateDiff contract_state_diff = 2;
    uint64 last_committed_block_height = 3;
}

message CommitStateDiffOutput {
    uint64 next_desired_block_height = 1;
    uint64 last_committed_block_height = 2;
}

message GetStateHashInput {
    uint64 block_height = 1;
}

message GetStateHashOutput {
    protocol.RequestStatus status = 1;
    primitives.sha256 state_root_hash = 2;
}