syntax = "proto3";
package services;
option go_package = "github.com/orbs-network/orbs-spec/types/go/services";

import "interfaces/protocol/gossip/message.proto";

service Gossip {
    // registration methods for external handlers that wish to receive callbacks
    option register_handler = "TransactionRelayGossipHandler";
    option register_handler = "BlockSyncGossipHandler";
    option register_handler = "LeanHelixConsensusGossipHandler";

    rpc TopicSubscribe (TopicSubscribeInput) returns (TopicSubscribeOutput);
    rpc TopicUnsubscribe (TopicUnsubscribeInput) returns (TopicUnsubscribeOutput);
    rpc SendMessage (SendMessageInput) returns (SendMessageOutput);
}

message TopicSubscribeInput {
    string topic = 1;
    string service_id = 2;
}

message TopicSubscribeOutput {
    uint64 subscription_token = 1;
}

message TopicUnsubscribeInput {
    string topic = 1;
    string service_id = 2;
}

message TopicUnsubscribeOutput {
    string topic = 1;
    string service_id = 2;
}

message SendMessageInput {
    gossip.Message gossip_message = 1;
}

message SendMessageOutput {
}