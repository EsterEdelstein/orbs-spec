syntax = "proto3";
package services;
option go_package = "github.com/orbs-network/orbs-spec/types/go/services";

import "protocol/gossip/leanhelixconsensus/messages.proto";
import "services/gossip.proto";

// relies on BlockStorage, ConsensusContext
// implements ConsensusBlocksListener, GossipMessageListener
service ConsensusAlgo {
    // internal gossip handlers
    rpc OnPrePrepareReceived (OnPrePrepareReceivedInput) returns (OnPrePrepareReceivedOutput);
    rpc OnPrepareReceived (OnPrepareReceivedInput) returns (OnPrepareReceivedOutput);
    rpc OnCommitReceived (OnCommitReceivedInput) returns (OnCommitReceivedOutput);
    rpc OnViewChangeReceived (OnViewChangeReceivedInput) returns (OnViewChangeReceivedOutput);
    rpc OnNewViewReceived (OnNewViewReceivedInput) returns (OnNewViewReceivedOutput);
    // internal calls
    rpc OnNewConsensusRound (OnNewConsensusRoundInput) returns (OnNewConsensusRoundOutput);
}

message OnNewConsensusRoundInput {
}

message OnNewConsensusRoundOutput {
}

message OnPrePrepareReceivedInput {
    leanhelixconsensus.PrePrepareMessage pre_prepare = 1;
}

message OnPrePrepareReceivedOutput {
}

message OnPrepareReceivedInput {
    leanhelixconsensus.PrepareMessage prepare = 1;
}

message OnPrepareReceivedOutput {
}

message OnCommitReceivedInput {
    leanhelixconsensus.CommitMessage commit = 1;
}

message OnCommitReceivedOutput {
} 

message OnViewChangeReceivedInput {
    leanhelixconsensus.ViewChangeMessage view_change = 1;
}

message OnViewChangeReceivedOutput {
} 

message OnNewViewReceivedInput {
    leanhelixconsensus.NewViewMessage new_view = 1;
}

message OnNewViewReceivedOutput {
}