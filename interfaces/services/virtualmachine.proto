syntax = "proto3";
package services;
option go_package = "github.com/orbs-network/orbs-spec/types/go/services";

import "protocol/results.proto";
import "protocol/transactions.proto";
import "protocol/contracts.proto";

// relies on Processor, CrosschainConnector
service VirtualMachine {
    // implements interfaces for handling callbacks from other services
    option implement_handler = "ContractSdkCallHandler";
    // called by ConsensusContext
    rpc ProcessTransactionSet (ProcessTransactionSetInput) returns (ProcessTransactionSetOutput); // Transactions Streaming
    // called by PublicApi
    rpc RunLocalMethod (RunLocalMethodInput) returns (RunLocalMethodOutput);
    // called by TransactionPool
    rpc TransactionSetPreOrder (TransactionSetPreOrderInput) returns (TransactionSetPreOrderOutput); // Transactions Streaming
}

message ProcessTransactionSetInput {
    uint64 block_height = 1;
    repeated protocol.SignedTransaction signed_transaction = 2;
}

message ProcessTransactionSetOutput {
    protocol.RequestStatus status = 1;
    repeated protocol.TransactionReceipt transaction_receipt = 2;
    repeated protocol.ContractStateDiff contract_state_diff = 3;
}

message RunLocalMethodInput {
    uint64 block_height = 1; // block_height = 0, indicates using a recent block height (best effort latest)
    protocol.Transaction transaction = 2;
}

message RunLocalMethodOutput {
    protocol.CallMethodStatus status = 1;
    repeated protocol.MethodArgument output_argument = 2;
    uint64 reference_block_height = 3;
    uint64 reference_block_timestamp = 4;
}

message TransactionSetPreOrderInput {
    uint64 block_height = 1;
    repeated protocol.SignedTransaction signed_transaction = 2;
}

message TransactionSetPreOrderOutput {
    protocol.RequestStatus status = 1;
    repeated PreOrderResult pre_order_result = 2; // TODO: transaction result
}

message PreOrderResult {
    PreOrderStatus status = 1;
}

// TODO: do we want unique results here?
enum PreOrderStatus {
    PRE_ORDER_STATUS_RESERVED = 0;
    PRE_ORDER_STATUS_VALID = 1;
    PRE_ORDER_STATUS_INVALID_SIGNATURE = 2;
    PRE_ORDER_STATUS_INVALID_ADDRESS_SCHEME = 3;
    PRE_ORDER_STATUS_NOT_APPROVED = 4;
}