syntax = "proto3";

import "protocol/primitives.proto";
import "protocol/protocol-primitives.proto";
import "protocol/transaction.proto";

service VirtualMachine {
  // Called by Consensus Context
  rpc ProcessTransactionSet (ProcessTransactionSetInput) returns (ProcessTransactionSetOutput); // Transactions Streaming
  // Called by Public API
  rpc RunLocalMethod (RunLocalMethodInput) returns (RunLocalMethodOutput);
  // Called by Transaction Pool
  rpc TransactionSetPreOrder (TransactionSetPreOrderInput) returns (TransactionSetPreOrderOutput); // Transactions Streaming
  // Called by Processor
  rpc SdkCall (SdkCallInput) returns (SdkCallOutput);
}

message ProcessTransactionSetInput {
  Uint64 block_height = 1;
  repeated SignedTransaction signed_transaction = 2;
}

message ProcessTransactionSetOutput {
  RequestStatus status = 1;
  repeated TransactionReceipt transaction_receipt = 2;
  repeated ContractStateDiff contract_state_diff = 3;
}

message RunLocalMethodInput {
  Uint64 block_height = 1; // block_height = 0, indicates using the default (latest) block height.
  Transaction transaction = 2;
}

message RunLocalMethodOutput {
  CallMethodStatus status = 1;
  repeated MethodArgument output_argument = 2;
  Uint64 reference_block_height = 3; 
  Uint64 reference_block_timestamp = 4;
}

message TransactionSetPreOrderInput {
  Uint64 block_height = 1;
  repeated SignedTransaction signed_transaction = 2; 
}

message TransactionSetPreOrderOutput {
  RequestStatus status = 1;
  repeated PreOrderResult pre_order_result = 2; //TBD transaction result
}

message PreOrderResult {
  PreOrderStatus status = 1;
}

enum PreOrderStatus {
  PRE_ORDER_VALID = 0;
  PRE_ORDER_INVALID_SIGNATURE = 1;
  PRE_ORDER_INVALID_ADDRESS_SCHEME = 2;
  PRE_ORDER_NOT_APPROVED = 3;
}

message SdkCallInput {
  Uint32 context_id = 1;
  ContractAddress contract = 2;
  MethodAddress method = 3;
  repeated MethodArgument input_argument = 4;
}

message SdkCallOutput {
  repeated MethodArgument output_argument = 1;
  // TBD error handling, return error
}
