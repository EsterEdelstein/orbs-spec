syntax = "proto3";

import "protocol/primitives.proto";
import "protocol/address.proto";
import "protocol/transactions.proto";

message OrderingBlock {
  OrderingBlockHeader header = 1;
  OrderingBlockMetaData meta_data = 2;
  OrderingBlockBody body = 3;
  OrderingBlockProof block_proof = 4;
}

message ValidationBlock {
  ValidationBlockHeader header = 1;
  ValidationBlockBody body = 2;
  ValidationBlockProof block_proof = 3;
}

message OrderingBlockHeader {
  Uint32 version = 1;
  Uint32 virtual_chain = 2;
  Uint64 block_height = 3;
  SHA256 prev_block_hash_ptr = 4;
  Uint64 time_stamp = 5;
  SHA256 transactions_root_hash = 6;
  SHA256 meta_data_hash = 7;
}

message OrderingBlockMetaData {
  Uint32 version = 1;
  repeated Uint32 nodes_reputaion = 2;
}

message OrderingBlockBody {
  repeated Transaction transactions = 1;
}

message OrderingBlockProof {
  repeated PBFTBlockProof block_signature = 1;
}

message PBFTBlockProof {
  Uint64 view = 1;
  Uint64 term_number = 2;
  SHA256 message_digest = 3;
  Ed25519PKey public_key = 4;
  Ed25519Sig signature = 5;
}

message ValidationBlockHeader {
  Uint32 version = 1;
  Uint32 virtual_chain = 2;
  Uint64 block_height = 3;
  SHA256 prev_block_hash_ptr = 4;
  Uint64 time_stamp = 5;
  SHA256 receipts_root_hash = 6;
  SHA256 state_diff_hash = 7;
  SHA256 ordering_block_hash_ptr = 8;
  SHA256 pre_execution_state_root_hash = 9;
  ValidationBlockBloomFilter bloom_filter = 10;
}

message ValidationBlockBloomFilter {
  Bytes filter = 1;
  // Events bloom filter: (Hard coded indices: 1 - tx_id, 2 - Sender address, 3 - Smart contract address)
}

message ValidationBlockBody {
  repeated TransactionReceipt transaction_receipts = 1;
  repeated SCStateDiff sc_state_diff = 2;
}

message ValidationBlockProof {
  repeated PBFTBlockProof block_signature = 1;
}

message SCStateDiff {
  Address contract_address = 1;
  repeated StateDiff state_diff = 2;
}

message StateDiff {
  RIP160SHA256 state_key = 1;
  Bytes state_value = 2;
}

