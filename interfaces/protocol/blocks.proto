syntax = "proto3";
package protocol;
option go_package = "github.com/orbs-network/orbs-spec/types/go/protocol";

import "primitives/crypto.proto";
import "primitives/protocol.proto";
import "protocol/transactions.proto";
import "protocol/contracts.proto";
import "protocol/blockproofs/lean_helix.proto";

message BlockPair {
    TransactionsBlock transactions_block = 1;
    ResultsBlock results_block = 2;
}

message TransactionsBlock {
    TransactionsBlockHeader header = 1;
    TransactionsBlockMetadata metadata = 2;
    //TODO: was: repeated protocol.SignedTransaction signed_transactions = 3; changed to byte array to resolve builder in builder issue
    repeated bytes signed_transactions_opaque = 3;
    TransactionsBlockProof block_proof = 4;
}

message ResultsBlock {
    ResultsBlockHeader header = 1;
    repeated protocol.TransactionReceipt transaction_receipts = 2;
    repeated protocol.ContractStateDiff contract_state_diffs = 3;
    ResultsBlockProof block_proof = 4;
}

message TransactionsBlockHeader {
    primitives.protocol_version protocol_version = 1;
    primitives.virtual_chain_id virtual_chain_id = 2;
    primitives.block_height block_height = 3;
    primitives.sha256 prev_block_hash_ptr = 4;
    primitives.timestamp timestamp = 5;
    primitives.merkle_sha256 transactions_root_hash = 6;
    primitives.sha256 metadata_hash = 7;
}

message ResultsBlockHeader {
    primitives.protocol_version protocol_version = 1;
    primitives.virtual_chain_id virtual_chain_id = 2;
    primitives.block_height block_height = 3;
    primitives.sha256 prev_block_hash_ptr = 4;
    primitives.timestamp timestamp = 5;
    primitives.merkle_sha256 receipts_root_hash = 6;
    primitives.sha256 state_diff_hash = 7;
    primitives.sha256 transactions_block_hash_ptr = 8;
    primitives.merkle_sha256 pre_execution_state_root_hash = 9;
    primitives.bloom_filter txhash_bloom_filter = 10;
    primitives.bloom_filter timestamp_bloom_filter = 11;
}

message TransactionsBlockMetadata {
    // TODO: complete me
    // uint32 version = 1;
    // repeated uint32 nodes_reputation = 2;
}

message TransactionsBlockProof {
    oneof type {
        blockproofs.LeanHelix lean_helix = 1;
    }
}

message ResultsBlockProof {
    oneof type {
        blockproofs.LeanHelix lean_helix = 1;
    }
}