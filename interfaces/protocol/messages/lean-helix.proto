syntax = "proto3";

import "protocol/primitives.proto";
import "protocol/protocol-primitives.proto";

// Lean Helix Consensus Messages
message LeanHelixMessage {
  oneof lean_helix_message {
    PrePrepareMessage pre_prepare = 1;
    PrepareMessage prepare = 2;
    CommitMessage commit = 3;
    ViewChangeMessage view_change = 4;
    NewViewMessage new_view = 5;
  }
}

enum LeanHelixMessageType {
  PRE_PREPARE = 0;
  PREPARE = 1;
  COMMIT = 2;
  NEW_VIEW = 3;
  VIEW_CHANGE = 4;  
}

message PrePrepareMessage {
  CommitPreparePPMessageSignedFields pre_prepare_signed_fields = 1;
  Ed25519Sig signature = 2;
  Bytes block_pair_data = 3;
}
  
message PrepareMessage {
  CommitPreparePPMessageSignedFields prepare_signed_fields = 1;
  Ed25519Sig signature = 2;
}

message CommitMessage {
  CommitPreparePPMessageSignedFields commit_signed_fields = 1;
  Ed25519Sig signature = 2;
  BLSSignature random_seed_share = 3;
}

message ViewChangeMessage {
  ViewChangeSignedFields view_change_signed_fields = 1;
  Ed25519Sig signature = 2;
  Bytes block_pair_data = 3;
}

message NewViewMessage {
  NewViewProof new_view_signed_fields = 1;
  Ed25519Sig header_signature = 2;
  Bytes block_pair_data = 3;
}

message CommitPreparePPMessageSignedFields {
  LeanHelixMessageType message_type = 1;
  Uint64 block_height = 2;
  Uint64 view = 3;
  SHA256 block_hash = 4; // SHA256(TransactionBlockHeader) XOR SHA256(ResultsBlockHeader).
  Ed25519PKey sender_public_key = 5;
}

message ViewChangeSignedFields {
  LeanHelixMessageType message_type = 1;
  Uint64 block_height = 2;
  Uint64 view = 3;
  PreparedProof prepared_proof = 4;
  Ed25519PKey sender_public_key = 5;
}

message PreparedProof {
  repeated CommitPreparePPMessageSignedFields pp_prepare_signed_fields = 1;
  repeated Ed25519Sig pp_prepare_signature = 2;  
}

message NewViewSignedFields {
  LeanHelixMessageType message_type = 1;
  Uint64 block_height = 2;
  Uint64 view = 3;
  NewViewProof new_view_proof = 4;
  CommitPreparePPMessageSignedFields nv_pp_signed_fields = 5;
  Ed25519Sig nv_pp_signature = 2;
  Ed25519PKey sender_public_key = 5;
}

message NewViewProof {
  repeated ViewChangeSignedFields view_change_header = 1;
  repeated Ed25519Sig view_change_header_signature = 2;
}

